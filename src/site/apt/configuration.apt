 --------
 Configuration
 --------
 --------

Configuration
~~~~~~~~
    This page shows a listing of all properties that are commonly used in dbmaintain. For a complete listing,
	look at the file dbmaintain-default.properties in the source code.

+-----+
# A list of logical names for the different configured databases, separated by comma's. If there's
# just one database, this property is not required. If names are listed, these names must be used
# in the names of the properties that define the database connection parameters.
databases.names=<optional list of database names>

# Properties that define the connection parameters to the database. If there are multiple databases,
# you have to specify the names of these databases in the database property names (i.e. database.dialect,
# database.driverClassName, database.url, database.userName, database.password and database.schemaNames).
# E.g. if database.names=abc,def you must define the properties database.abc.url and database.def.url.
# If there's only one database, database.names can be omitted and you simply use the property database.url.
database.driverClassName=<fully qualified JDBC driver class name>
database.url=<database URL>
database.userName=<database username>
database.password=<database password>

# This property specifies the underlying DBMS implementation. Supported values are 'oracle', 'db2', 'mysql', 'hsqldb',
# 'postgresql', 'derby' and 'mssql'.
database.dialect=<the dialect>

# Comma-separated list of all database schemas used.
# A schema name is case sensitive if it's surrounded by database identifier quotes (eg " for oracle)
database.schemaNames=<comma separated list of all database schemas used>

# Indicates the database can be recreated from scratch if needed. If set to true, the database is cleared and recreated
# from scratch in case of an irregular script update. Following are irregular script updates:
# - A script that was already executed has been modified
# - A new script has been added with an index number lower than the one of an already executed script
# - An script that was already executed has been removed or renamed
#
# If set to false, the dbmaintainer will give an error if one of these situations occurs.
dbMaintainer.fromScratch.enabled=false

# If set to true, the table DBMAINTAIN_SCRIPTS will be created automatically if it does not exist yet.
# If false, an exception is thrown, indicating how to create the table manually.
dbMaintainer.autoCreateDbMaintainScriptsTable=false

# Comma separated list of locations where database scripts can be found. This list may contain folders as well as script archive files.
dbMaintainer.script.locations=

# Extension of the files containing the database update scripts
dbMaintainer.script.fileExtensions=sql,ddl

# Comma separated list of directories and files in which the post processing database scripts are
# located. Directories in this list are recursively search for files.
dbMaintainer.postProcessingScript.directoryName=postprocessing

# Encoding to use when reading the script files
dbMaintainer.script.encoding=ISO-8859-1

# If true, carriage return chars will be ignored when calculating check sums.
# This will make all scripts OS independent: all line endings will be new lines (linux-style) during the check sum
# calculation. This avoids problems when copying and editing files on both Windows and Linux platforms. The check sums will
# still be the same if only the type of line endings has changed.
# By default this setting is disabled for backwards compatibility reasons.
dbMaintainer.script.ignoreCarriageReturnsWhenCalculatingCheckSum=false

# The prefix to use for locating the target database part in the filename.
# The target database should be be located after the index if there is any and should begin with this prefix.
#   E.g. 01_@databaseA_myscript.sql
# If the file name consists out of multiple path-parts, the last found target database is used
#   E.g. 01_@database1/01_@database2_myscript.sql
dbMaintainer.script.targetDatabase.prefix=@

# The prefix to use as prefix in script filenames to identify qualifiers
# E.g. if the filename is 01_#REFDATA_myscript.sql, this script is qualified as a refdata script
dbMaintainer.script.qualifier.prefix=#

# The qualifier to use to determine whether a script is a patch script.
#   E.g. 01_#patch_myscript.sql
dbMaintainer.script.patch.qualifiers=patch

# If this property is set to true, a patch script is allowed to be executed
# even if another script with a higher index was already executed.
dbMaintainer.allowOutOfSequenceExecutionOfPatches=true

# Defines whether script last modification dates can be used to decide whether an existing script has changed. If set
# to true, the dbmaintainer will decide that a file didn't change since the last time if it's last modification date hasn't
# changed. If it did change, it will first calculate the checksum of the file to verify that the content really
# changed. Setting this property to true improves performance: if set to false the checksum of every script must
# be calculated for each run of the dbmaintainer.
dbMaintainer.useScriptFileLastModificationDates=true

# If set to true, all foreign key and not null constraints of the database are automatically disabled after the execution
# of the scripts.
dbMaintainer.disableConstraints=false

# If set to true, all database sequences and identity columns are set to a minimum value after the execution of the scripts.
# The minimum accepted sequence value is indicated by the property sequenceUpdater.lowestAcceptableSequenceValue
dbMaintainer.updateSequences=false
# Threshold indicating the minimum value of sequences. If sequences are updated, all sequences having a lower value than this
# one are set to this value.
sequenceUpdater.lowestAcceptableSequenceValue=1000

# Indicates whether the database should be 'cleaned' before scripts are executed by the dbMaintainer. If true, the
# records of all database tables, except for the ones listed in 'dbMaintainer.preserve.*' are deleted before executing
# the first script.
dbMaintainer.cleanDb=false

# Comma separated list of database items that may not be dropped or cleared by DbMaintain when
# updating the database from scratch.
# Schemas can also be preserved entirely. If identifiers are quoted (eg "" for oracle) they are considered
# case sensitive. Items may be prefixed with the schema name. Items that do not have a schema prefix are
# considered to be in the default schema.
dbMaintainer.preserve.schemas=
dbMaintainer.preserve.tables=
dbMaintainer.preserve.views=
dbMaintainer.preserve.materializedViews=
dbMaintainer.preserve.synonyms=
dbMaintainer.preserve.sequences=

# Comma separated list of table names. The tables listed here will not be emptied during a cleanDatabase operation.
# Data of the dbmaintain_scripts table is preserved automatically.
# Tables listed here will still be dropped before a fromScratch update. If this is not desirable
# you should use the property dbMaintainer.preserve.tables instead.
# Schemas can also be preserved entirely. If identifiers are quoted (eg "" for oracle) they are considered
# case sensitive. Items may be prefixed with the schema name. Items that do not have a schema prefix are considered
# to be in the default schema
dbMaintainer.preserveDataOnly.schemas=
dbMaintainer.preserveDataOnly.tables=
+-----+